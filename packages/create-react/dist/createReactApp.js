'use strict';const chalk=require("chalk"),{spawn,spawnSync,execSync}=require("child_process"),path=require("path"),os=require("os");var process=require("process");const{Command}=require("commander"),inquirer=require("inquirer"),fs=require("fs-extra"),validateProjectName=require("validate-npm-package-name"),packageJson=require("../package.json");let projectName;// 命令辅助信息
const program=new Command(packageJson.name).version(packageJson.version).arguments("<project-dir>").usage(`${chalk.green("<project-directory>")} [options]`).action(function(a){projectName=a}).option("--use-multipage").option("--info","print environment debug info").option("--help",()=>{console.log(`Only ${chalk.green("<project-directory>")} is required.`)}).parse(process.argv);// 接收--info参数， 返回环境信息
program.info&&(console.log(chalk.bold("\nEnvironment Info:")),console.log(`\n  current version of ${packageJson.name}: ${packageJson.version}`),console.log(`  running from ${__dirname}`),envinfo.run({System:["OS","CPU"],Binaries:["Node","npm","Yarn"],Browsers:["Chrome","Edge","Internet Explorer","Firefox","Safari"],npmPackages:["react","react-dom","react-scripts"],npmGlobalPackages:["create-react-app"]},{duplicates:!0,showNotFound:!0}).then(console.log)),projectName||(console.error("Please specify the project directory:"),console.log(`  ${chalk.cyan(program.name())} ${chalk.green("<project-directory>")}`),console.log("For example:"),console.log(`  ${chalk.cyan(program.name())} ${chalk.green("my-react-demo")}`),console.log(),console.log(`Run ${chalk.cyan(`${program.name()} --help`)} to see all options.`),process.exit(1));// creatReact
function creatReact(a,b){const c=path.resolve(a),d=path.basename(c);console.log(2,c,d),checkAppName(a);// 检查目标文件名是否存在， 不存在的话创建文件
const e=fs.pathExistsSync(d);e&&console.error(chalk.red("\nThe project name already exists, please reset the project name"));// 创建目标项目
try{install(c,b)}catch(a){console.log(a)}}// install
async function install(a){const b=path.dirname(a),c=path.basename(a);console.log(3,b,c);spawnSync("npx",["create-react-app",c,"--template","typescript"]);process.chdir(a),process.cwd();const d=["antd","axios","typestyle"].sort(),e=["add"].concat(d);await spawn("yarn",e);const f=["add","--dev"].concat(["babel-plugin-import","cross-env","file-loader","craco-less","@craco/craco","stylelint","stylelint-order","stylelint-config-standard","stylelint-config-prettier","husky","lint-staged","commitizen","cz-conventional-changelog","@commitlint/config-conventional","@commitlint/cli","standard-version"]);await spawn("yarn",f),execSync(`echo "module.exports = {extends: ['@commitlint/config-conventional']}" > commitlint.config.js`),await fs.copy(path.join(b,"/src/react-typescript-template"),a);const g=await fs.readJson(a+"/package.json",{throws:!1});g.script={start:"cross-env craco start",build:"cross-env craco build",test:"craco test","build:analyze":"cross-env analyze=true craco build",commit:"npx git-cz",release:"standard-version",prepare:"husky install",eslint:"./node_modules/.bin/eslint --fix --ext .tsx,.ts src/",stylelint:"./node_modules/.bin/stylelint --fix .css,.less,.sass"},g["lint-staged"]={"*.{ts,tsx,js,jsx}":["npm run eslint","git add ."],"*.{ts,tsx,json,css,less,md}":["prettier --write --ignore-unknown","git add ."]},fs.writeFileSync(path.join(a,"package.json"),JSON.stringify(g,null,2))}// 检查项目名是否合法
function checkAppName(a){const b=validateProjectName(a);b.validForNewPackages||(console.error(chalk.red(`Cannot create a project named ${chalk.green(`"${a}"`)} because of npm naming restrictions:\n`)),[...(b.errors||[]),...(b.warnings||[])].forEach(a=>{console.error(chalk.red(`  * ${a}`))}),console.error(chalk.red("\nPlease choose a different project name.")),process.exit(1))}console.log(1,projectName),creatReact(projectName,program.useMultipage);